#! /bin/sh
# $OpenLDAP$
## This work is part of OpenLDAP Software <http://www.openldap.org/>.
##
## Copyright 1998-2012 The OpenLDAP Foundation.
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

# The default debug level logs more than 1Gb:
SLAPD_DEBUG=${SLAPD_DEBUG_MT_HOT-stats}

echo "running defines.sh"
. $SRCDIR/scripts/defines.sh

if test $MONITORDB = "no" ; then 
	echo "Monitor backend not available, test skipped"
	exit 0
fi 

if test x$TESTLOOPS = x ; then
	TESTLOOPS=50
fi

echo "mkdir -p $TESTDIR $DBDIR1"
mkdir -p $TESTDIR $DBDIR1

#
# Populate and start up slapd server with some random data
#

echo "Running slapadd to build slapd database..."
echo "$CONFFILTER $BACKEND $MONITORDB < $MCONF > $ADDCONF"
. $CONFFILTER $BACKEND $MONITORDB < $MCONF > $ADDCONF
echo $SLAPADD -f $ADDCONF -l $LDIFORDERED
time -p $SLAPADD -f $ADDCONF -l $LDIFORDERED
RC=$?
if test $RC != 0 ; then
	echo "slapadd failed ($RC)!"
	exit $RC
fi

echo "Running slapindex to index slapd database..."
echo "======================================================"
echo "$CONFFILTER $BACKEND $MONITORDB < $CONF > $CONF1"
. $CONFFILTER $BACKEND $MONITORDB < $CONF > $CONF1
echo "$SLAPINDEX -f $CONF1"
time -p $SLAPINDEX -f $CONF1
RC=$?
if test $RC != 0 ; then
	echo "warning: slapindex failed ($RC)"
	echo "  assuming no indexing support"
fi

echo "Starting slapd on TCP/IP port $PORT1..."
rm -rf out
echo $PRELOAD_LIB
echo LD_PRELOAD=$PRELOAD_LIB $SLAPD -f $CONF1 -h $URI1 -d $LVL $TIMING
LD_PRELOAD=$PRELOAD_LIB $SLAPD -f $CONF1 -h $URI1 -d $LVL $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"

sleep 1

# Perform a basic search, make sure of a functional setup
echo "======================================================"
echo "Testing basic monitor search..."
for i in 0 1 2 3 4 5; do
	time -p $LDAPSEARCH -s base -b "$MONITORDN" -H $URI1 \
		'(objectclass=*)' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done

if test $RC != 0 ; then
	echo "mt-hot read failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

cat /dev/null > $MTREADOUT

# Perform a basic multi-threaded search using multiple connections
echo "======================================================"
CONN=4
THR=4
OUTER=100
INNER=`expr $TESTLOOPS \* 1`
echo "Testing basic mt-hot search: $THR threads $CONN conns ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" \
	-c $CONN -m $THR -L $OUTER -l $INNER
time  -p $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" -f "(objectclass=*)" \
	-c $CONN -m $THR -L $OUTER -l $INNER
	# >> $MTREADOUT 2>&1
RC=$?
mv out out-${BACKEND}
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

return;

# Perform a multi-threaded random DB search using multiple connections
echo "======================================================"
CONN=5
THR=100
OUTER=5
INNER=`expr $TESTLOOPS \* 2`
echo "Testing random mt-hot search: $THR threads $CONN conns ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(objectclass=*)" \
	-c $CONN -m $THR -L $OUTER -l $INNER
time -p $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(objectclass=*)" \
	-c $CONN -m $THR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

# Perform a multi-threaded random reads and writes using multiple connections
#echo "======================================================"
#CONN=5
#THR=10
#WTHR=10
#OUTER=5
#INNER=`expr $TESTLOOPS \* 2`
#echo "Testing random mt-hot r/w search: $THR read threads $WTHR write threads $CONN conns ($OUTER x $INNER) loops..."
#echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
#	-e "$BASEDN" -f "(&(!(cn=rwtest*))(objectclass=*))" \
#	-c $CONN -m $THR -M $WTHR -L $OUTER -l $INNER
#time -p $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
#	-e "$BASEDN" -f "(&(!(cn=rwtest*))(objectclass=*))" \
#	-c $CONN -m $THR -M $WTHR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
#RC=$?
#if test $RC != 0 ; then
#	echo "slapd-mtread failed ($RC)!"
#	test $KILLSERVERS != no && kill -HUP $KILLPIDS
#	exit $RC
#fi


test $KILLSERVERS != no && kill -HUP $KILLPIDS

echo ">>>>> Test succeeded"

exit 0
